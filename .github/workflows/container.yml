on:
  push:

jobs:
  build-container:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v25
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Build container
        run: |
          nix build .#container
          mv result container.tar.gz
      - name: Upload container
        uses: actions/upload-artifact@v4
        with:
          name: container
          path: container.tar.gz

  release:
    needs: build-container
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: container
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Load Docker image
        run: |
          IMAGE_ID=$(docker load -i container.tar.gz -q|sed 's|Loaded image: ||')
          docker tag $IMAGE_ID ghcr.io/matko/github-webhook-to-workflow-dispatch:${{ github.ref_name }}
      - name: Push Docker image
        run: docker push ghcr.io/matko/github-webhook-to-workflow-dispatch:${{ github.ref_name }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Docker image for this release: ghcr.io/matko/github-webhook-to-workflow-dispatch:${{ github.ref_name }}
          draft: false
          prerelease: false
      - name: Upload Docker image as a release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./container.tar.gz
          asset_name: container-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip
